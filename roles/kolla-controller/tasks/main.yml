---

# Kolla-Kubernetes

- name: Install kolla-k8s deps [Debian]
  package: name={{item}} state=latest
  become: True
  with_items:
    - ansible
    - python-pip
    - python-dev
  when:
    - ansible_os_family == 'Debian'

- name: Install EPEL [RedHat]
  yum:
    package: "{{item}}"
    state: present
    update_cache: True
  with_items:
    - epel-release
  become: True
  when:
    - ansible_os_family == 'RedHat'

- name: Install kolla-k8s deps [RedHat]
  yum:
    package: "{{item}}"
    state: present
    update_cache: True
  with_items:
    - epel-release
    - ansible
    - python-pip
    - python-devel
  become: True
  when:
    - ansible_os_family == 'RedHat'


## TODO more ansible native
#- name: Create kolla-bringup dir
#  become: True
#  command: mkdir /home/ubuntu/kolla-bringup

- name: Clone kolla-ansible
  git:
    repo: 'http://github.com/openstack/kolla-ansible'
    dest: /home/{{ username }}/kolla-ansible

- name: Chown kolla-ansible
  file:
    path: /home/{{ username }}/kolla-ansible
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: 0755
    recurse: yes
    state: directory

- name: Clone kolla-kubernetes
  git:
    repo: 'http://github.com/openstack/kolla-kubernetes'
    dest: /home/{{ username }}/kolla-kubernetes

- name: Chown kolla-kubernetes
  file:
    path: /home/{{ username }}/kolla-kubernetes
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: 0755
    recurse: yes
    state: directory

- name: Chown .kube
  file:
    path: /home/{{ username }}/.kube
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: 0755
    recurse: yes
    state: directory

# TODO add proper cherrypick w vanilla git
# apply a cherrypick that fixes kollakube tool
#cd kolla-kubernetes
#git review -x 439740
#cd ..
# ALSO this one https://review.openstack.org/#/c/422803/

- name: Install kolla-kubernetes
  become: True
  command: sudo pip install -U /home/{{ username }}/kolla-ansible/ /home/{{ username }}/kolla-kubernetes/

- name: Copy default kolla configuration to etc
  become: True
  command: cp -aR /home/{{ username }}/kolla-ansible/etc/kolla /etc

- name: Copy default kolla-kubernetes configuration to /etc
  become: True
  command: cp -aR /home/{{ username }}/kolla-kubernetes/etc/kolla-kubernetes /etc

- name: Generate default passwords via SPRNG
  become: True
  become_user: "{{ username }}"
  #command: kolla-genpwd
  command: kolla-kubernetes-genpwd

# TODO Remove ignore errors
- name: Create a kubernetes namespace to isolate this kolla deployment
  become: True
  become_user: "{{ username }}"
  command: kubectl create namespace kolla
  ignore_errors: True

# TODO move to node also
#- name: Label the AIO node as the compute and controller node:
#  kubectl label node $(hostname) kolla_compute=true
#  kubectl label node $(hostname) kolla_controller=true

# TODO Remove ignore errors
- name: Label the master node as the controller node
  become: True
  become_user: "{{ username }}"
  command: kubectl label node {{ ansible_hostname }} kolla_controller=true
  ignore_errors: True

# TODO Remove ignore errors
- name: Label the master node a compute node
  become: True
  become_user: "{{ username }}"
  command: kubectl label node {{ ansible_hostname }} kolla_compute=true
  ignore_errors: True

# TODO implement
#- name: Modify kolla configuration
#set network_interface in /etc/kolla/globals.yaml to the management interface name.
#set neutron_external_interface in /etc/kolla/globals.yml to the Neutron interface name.
#This is the external interface that neutron will use.  It must not have an IP
#address assigned to it.

- set_fact:
      globals_config: "{{ lookup('template', 'templates/globals_config.j2') }}"

- name: Add required configuration to the end of /etc/kolla/globals.yml
  blockinfile:
    dest: /etc/kolla/globals.yml
    content: '{{ globals_config }}'
    state: present
    insertafter: EOF


# TODO Might have to make dir

- name: Make /etc/kolla/config
  become: True
  command: mkdir -p /etc/kolla/config/

- name: enable QEMU libvirt functionality and enable a workaround for a bug in libvirt
  blockinfile:
    dest: /etc/kolla/config/nova.conf
    state: present
    create: yes
    content: |
      [libvirt]
      virt_type=qemu
      cpu_mode=none

- name: Generate the default configuration
  become: True
  become_user: "{{ username }}"
  command: sudo ansible-playbook -e ansible_python_interpreter=/usr/bin/python -e @/etc/kolla/globals.yml -e @/etc/kolla/passwords.yml -e CONFIG_DIR=/etc/kolla kolla-kubernetes/ansible/site.yml

# TODO remove ignore errors
- name: Generate the Kubernetes secrets and register them with Kubernetes
  become: True
  become_user: "{{ username }}"
  command: /home/{{ username }}/kolla-kubernetes/tools/secret-generator.py create
  ignore_errors: True

# TODO remove ignore errors currently needed for re-running task
- name: Enable resolv.conf workaround
  command: /home/{{ username }}/kolla-kubernetes/tools/setup-resolv-conf.sh kolla
  become: True
  become_user: "{{ username }}"
  ignore_errors: True

# TODO remove ignore errors
- name: Create and register the Kolla config maps
  become: True
  become_user: "{{ username }}"
  command: |
    kollakube res create configmap \
    mariadb keystone horizon rabbitmq memcached nova-api nova-conductor \
    nova-scheduler glance-api-haproxy glance-registry-haproxy glance-api \
    glance-registry neutron-server neutron-dhcp-agent neutron-l3-agent \
    neutron-metadata-agent neutron-openvswitch-agent openvswitch-db-server \
    openvswitch-vswitchd nova-libvirt nova-compute nova-consoleauth \
    nova-novncproxy nova-novncproxy-haproxy neutron-server-haproxy \
    nova-api-haproxy cinder-api cinder-api-haproxy cinder-backup \
    cinder-scheduler cinder-volume iscsid tgtd keepalived \
    placement-api placement-api-haproxy
  ignore_errors: True



- name: Build all helm microcharts, service charts, and metacharts
  become: True
  become_user: "{{ username }}"
  command: /home/{{ username }}/kolla-kubernetes/tools/helm_build_all.sh ~/.helm/repository/kolla

- set_fact:
      cloud_yaml: "{{ lookup('template', 'templates/cloud.yaml') }}"

- name: Create a cloud.yaml file for the deployment of the charts
  blockinfile:
    dest: /home/{{ username }}/cloud.yaml
    content: '{{ cloud_yaml }}'
    state: present
    create: yes

- name: Replace all occurances of 192.168.7.105 with the IP your management interface nic
  replace:
    dest: /home/{{ username }}/cloud.yaml
    regexp: '192.168.7.105'
    replace: "{{ management_ip }}"

- name: Replace all occurances of enp1s0f1 with your neutron interface name (e.g. enp1s0f1)
  replace:
    dest: /home/{{ username }}/cloud.yaml
    regexp: '1enp1s0f1'
    replace: "{{ neutron_iface }}"

# TODO change to poll for tiller, from init Tiller takes ~4min on vbox
- name: Wait on Tiller for 60 secs
  wait_for:
    timeout: 60

# TODO fix yaml path
- name: Start mariadb first and wait for it to enter the RUNNING state
  become: True
  become_user: "{{ username }}"
  command: helm install --debug kolla-kubernetes/helm/service/mariadb --namespace kolla --name mariadb --values ./cloud.yaml

# TODO change to poll for db
- name: Wait on mariadb for 120 secs
  wait_for:
    timeout: 120

- name: Start kolla-kubernetes services part1
  become: True
  become_user: "{{ username }}"
  command: helm install --debug kolla-kubernetes/helm/service/{{ item }} --namespace kolla --name {{ item }} --values ./cloud.yaml
  with_items:
    - rabbitmq
    - memcached
    - keystone
    - glance
    - cinder-control

- name: Start kolla-kubernetes microservices part1
  become: True
  become_user: "{{ username }}"
  command: helm install --debug kolla-kubernetes/helm/microservice/cinder-volume-lvm-daemonset --namespace kolla --name cinder-volume --values ./cloud.yaml

- name: Start kolla-kubernetes services part2
  become: True
  become_user: "{{ username }}"
  command: helm install --debug kolla-kubernetes/helm/service/{{ item }} --namespace kolla --name {{ item }} --values ./cloud.yaml
  with_items:
    - horizon
    - openvswitch
    - neutron
    - nova-control
    - nova-compute

- name: Start kolla-kubernetes microservices part2
  become: True
  become_user: "{{ username }}"
  command: helm install --debug kolla-kubernetes/helm/microservice/{{ item }} --namespace kolla --name {{ item }} --values ./cloud.yaml
  with_items:
    - nova-placement-deployment
    - nova-placement-create-keystone-user-job
    - nova-placement-create-keystone-service-job
    - nova-placement-svc
    - nova-placement-create-keystone-endpoint-internal-job
    - nova-placement-create-keystone-endpoint-admin-job
    - nova-placement-create-keystone-endpoint-public-job
  ignore_errors: True

# TODO wait for nova-compute
#- name: Wait for nova-compute the enter the running state before creating the cell0 database

- name: Start kolla-kubernetes microservices part2
  become: True
  become_user: "{{ username }}"
  command: helm install --debug kolla-kubernetes/helm/microservice/{{ item }} --namespace kolla --name {{ item }} --values ./cloud.yaml
  with_items:
    - nova-cell0-create-db-job
    - nova-api-create-simple-cell-job

# TODO add wait for pods
# Wiat for pods
#watch -d -n 5 -c kubectl get pods --all-namespaces

- name: Generate openrc file
  become: True
  become_user: "{{ username }}"
  command: kolla-kubernetes/tools/build_local_admin_keystonerc.sh ext

- name: Install openstack clients
  become: True
  command: pip install {{ item }}
  with_items:
    - python-openstackclient
    - python-neutronclient
    - python-cinderclient


#- name: Bootstrap the cloud envrionment and create a VM as requested
# kolla-ansible/tools/init-runonce

#- name: Create a floating IP address and add to the VM
# openstack server add floating ip demo1 $(openstack floating ip create public1 -f value -c floating_ip_address)
